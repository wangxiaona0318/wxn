1 typeof => 基本数据类型判断 判断引用数据类型返回的都是object
  instanceof => 判断一个实例是否属于一个对象，不能处理基本数据类型
  constructor => 定义在原型上的属性 => 原型被更改的时候就不准了
  Object.prototype.toString.call(6) => "[object Number]"
2 类数组转化成数组 => 为了使用数组的方法
  ps: try{
        先尝试这里的代码，如果报错执行catch
        throw new Error('哈哈');
      }catch(e){
        e是一个对象  e.message ： try报错的信息
      }
      'JSON' in window ? JSON.parse() : eval();

      function listToArray(likeAry){
         try{
            return Array.prototype.slice.call(likeAry);
         }catch(e){
            循环方式去处理
         }
      }
3 sort排序: sort(function (a,b){
                a,b分别是要排序比较的相邻两项
                return a-b; 是否换位置的依据
                return a.age - b.age
                return a.innerHTML.localeCompare(b); //字符串
           })

4 JSON : 数据格式 => 前后端交互
           var jsonObj = {"name":"zhufeng","age":7};
           1 属性名字要用双引号
           2 属性值如果是字符串也用双引号

          JSON.parse(); => 把字符串转化成对象 => 去引号
          JSON.stringify(); => 把对象转化成字符串 => 加引号

          JSON在IE7-6不兼容 => window.JSON => undefined => 'JSON' in window(false)
5 DOM映射，回流，重绘 ，文档碎片， appendChild ,innerHTML
          dom映射: 通过dom方式获取来的数据和页面内的元素还是绑定在一起的
          回流 ： 元素的增加删除位置改变都会引起回流
          重绘 ： 样式改变引起重绘
          文档碎片 : document.createDocumentFragment => 临时dom容器
          appendChild : 如果添加到页面中会引起回流
          innerHTML : 虽然只引起一次回流，但是破坏原有的元素。

          ps : 如果页面内原来不存在元素，那么使用innerHTML更好
6 jsonParse :    function jsonParse(jsonStr){
                    return 'JSON' in window ? JSON.parse(jsonStr) : eval("("+ jsonStr +")");
                 }