1、客户端本地存储
   第一次打开页面，我们向客户端的本地磁盘存储一些信息，以后页面关闭或者刷新，我们存储的信息不消失，依然可以从本地把存储的信息获取到

   ->应用场景:
     1)记住用户名密码:第一次登录成功,我们把用户名和密码存储到本地;下一次再打开登录这个页面,用户名和密码会自动的显示在输入框中;
     2)自动登录:第一次登录成功后,我们把用户名和密码存储到本地;下一次打开页面,网站会把本地存储的用户名和密码获取到,然后实现自动登录功能;
     3)购物车:我们在A页面点击加入购物车,我们把信息存储到本地,到另外一个页面,如果需要展示购买的信息,我们在从本地把存储的信息获取到即可
     =>我们在A页面操作一些信息,需要在其它的B页面也获取到这些信息,或者是页面关闭后这些信息都不要消失,此类需求我们就会用到本地存储

2、实现本地存储的方案
  ->cookie
    1)兼容所有的浏览器
    2)在同一个源下最多只能存储4KB大小的内容
    3)cookie存储是有过期时间的(时间我们自己可以设置)，到了时间，cookie自动清除
    4)360安全卫士垃圾清理或者浏览器的垃圾清理等操作，都有可能会把cookie清除掉
    5)用户可能出于安全的角度，开启无痕浏览或者隐身模式，这样我们的cookie是无法存储的
    6)cookie不是严格的本地存储,它本身和服务器之间存在很大的猫腻儿，我们需要使用cookie的时候，它总是在客户端和服务器之间来回的传输

  ->webStorage:localStorage、sessionStorage
    1)不兼容IE低版本的浏览器,因为它是HTML5中新增加的API方法(移动端)
    2)在同一个源下最多可以存储5MB的内容 =>我们基于这个特点给服务器减压:第一次加载页面，我们使用AJAX/JSONP等技术从服务器端获取到了很多需要展示的数据，我们把这些数据动态的绑定在页面中，但是绑定完成后，我们把本次获取的数据(或者是我们已经拼接好的字符串)以及当前的时间存储到客户端本地(localStorage)；当用户在一次打开页面的时候，我们看一下当前的时间，如果当前的时间和上一次存储的时间间隔不到一分钟(差值自己定)，我们不需要向服务器发送请求获取数据了(服务器减压)，只需要把上一次本地存储的内容拿出来展示在页面中即可；若果超过了时间，我们从新从服务器拿数据绑定，不要忘记把最新的数据从新的存储到本地一份，记录最新的存储时间;
    3)webStorage是没有过期时间的，属于永久存储到本地(除非我们手动清除)
    4)360或者浏览器的垃圾清理是不会对webStorage产生影响的
    5)webStorage的存储不受无痕浏览和隐身模式的影响
    6)webStorage就是本地存储，和服务器没有半毛钱的关系

  localStorage PK sessionStorage
  ->localStorage:本地永久存储
  ->sessionStorage:本地临时会话存储(页面刷新，数据还在；但是页面一但关闭，存储的数据就清空了)


  共同:
    1)本地存储,存储的位置:对应浏览器、并且对应源(域)下存储的一些信息
      在谷歌浏览器的京东页面中存储一些信息
        ->我在IE浏览器的京东页面中能不能获取到? =>不能
        ->我在谷歌浏览器的珠峰页面中能不能获取到? =>不能
        ->我在谷歌浏览器的京东其它页面中能不能获取到? =>可以

    2)如何查看本地的存储信息
      谷歌浏览器 -> F12 -> Resources/Application -> LocalStorage/Cookies
      不管是哪一种方式，我们在控制台都可以看到，而且采用的是明文存储(你存的啥我就可以看到啥)，这样的话很不安全，重要的信息(密码、银行卡号、手机号等)建议不要存储，如果非要存储的话，需要把存储的内容进行加密
      [可逆转的加密]

      [不可逆转加密]
        对于密码都需要使用不可逆转的加密(md5.js->MD5加密)

3、具体的用法
  cookie
    document.cookie='';
    ->cookie.js

  localStorage:
    setItem([key],[value])
    getItem([key])
    removeItem([key])
    clear()


4、使用字符串拼接(或者模板引擎->原理也是字符串拼接)，绑定的数据在网站的原代码中看不见，这样不利于SEO搜索引擎的优化
   ->有一些公司的一些产品不是完全的前后端分离,数据获取和数据绑定不是由前端来做的，而是交给后台开发(PHP、Python、Ruby、JSP...)来做处理 =>通过后台绑定数据(服务器端渲染数据)在页面的原代码中可以看到绑定的内容,有利于SEO优化

   ->目前市场上正在趋向于前后端完全分离
    字符串拼接
    模板引擎:EJS...

5、EJS
  本质：把JS代码放到HTML中去做，字符串拼接的本质是把HTML放到JS中去做

  ->在HTML中制定模板
    EJS的语法
     <%放的是JS代码%>
     <%=放的是需要在此区域输出的内容%>


  ->在JS中获取到需要绑定的数据源

  ->把模板和数据统一交给EJS引擎去解析渲染,解析渲染完成的结果就是我们需要展示的数据和HTML结构

  ->把解析的结果放入到页面中的指定容器中展示即可






