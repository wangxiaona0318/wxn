git相关:
    1 版本管理工具 => 百度 svn
    2 github: 全球开源社区
    3 注册github账号
    4 在自己的账号下创建一个仓库 => 存放自己觉得有用的代码 => 一个账户可以创建多个仓库

 如何更新老师的代码:
     1 新建一个本地文件夹
     2 进入文件夹右键打开git bash
     3 git clone +群公告地址 (克隆一个和远程仓库相同的本地仓库) => 这一个命令就可以完成本地仓库(带.git的那个文件夹)和远程仓库(老师的)的链接。默认clone之后这个链接名字叫做origin
     4 clone之后就多了一个叫做JavaScript201611的文件夹
     5 以后每天直接进入到JavaScript201611这个文件夹内 git pull origin master

  如何把更新的代码放到自己的仓库一份:
     1 在自己的用户名下新建一个仓库，并且这个仓库必须保证是一个空仓库。不要去勾选那个readme的checkbox
     2 本地仓库主动和自己的远程仓库建立链接 git remote add teacher(任意：代表这个链接的名字) https://github.com/你自己的用户名/你刚刚新建的空仓库名字.git
     3 查看本地仓库和几个远程仓库保持连接  git remote -v
     4 git add -A  => git commit -m"信息" => git push teacher(推送到哪个仓库就写代表那个仓库的链接名字) master
     5 用户名 和 密码

  如何把自己的新增加的文件推送到老师的仓库中 => fork
     1 new pull request
     2 老师处理这些请求
  ps: 假如有一天更新不了，那么可以删掉重新克隆一份


预解释:
     1 带var和function都会被预解释(变量提升),区别带var在预解释阶段只声明，并没有赋值。只要代码执行到赋值那一行的时候才有值。带function是在预解释阶段就已经赋值结束了。而在执行到定义函数那一行的时候就直接跳过了。ps: 预解释只发生在当前作用域（比如: 在全局作用域内是不会预解释被函数包着的变量的）
     2 作用域: 只要代码运行就会产生作用域。=> 放在script标签内的代码页面刷新的时候就会运行，就会产生一个window全局作用域。并且只有在关闭页面的时候才会销毁. => 放在函数体内的代码只要执行函数的时候也会执行，也会形成一个作用域。这个作用域是私有的，这个作用域内的变量(形参)在全局是不能访问的。
      ps: 在函数里面可以访问外面的变量，但是外面不可以访问函数内部的变量

     3 引用数据类型的赋值过程： 先分配一块堆内存空间
                               然后把代码当作字符串存到到空间中
                               最后把空间地址返回赋值给变量或者函数名
                                ps: 在赋值的过程中不能使用变量
     4 全局变量带var和不带var的区别： => 如果在定义之前打印那么一个报错一个是undefined
                                    => 在定义下打印没有区别，都是window的一个属性
                                    ps: 如果在赋值的过程中类似于 num = 100 无论被多少层函数包含，只要没有地方赋值那么就会赋值给window当属性(全局变量)










